input = r"""\.........../../..\.\.\................|..-...\........./.......-.....................-...\...--....../..\....
........|............|............-.........|....\.................\-.........../...../....-../....\..........
.-....................\\..................|.\..........\.........../.............................-...-........
............-.....\/...........-........-......................-..-...../...............|................/....
.......\....-...-...............|.............-...................../....-../............./\..........-..\....
..................-.............\.........\........-......./..../..|....|......-/............\.............\..
-...............|.........\........../.\........../......./-..........-...-.....-............................|
.\\...\..........-............./...-|...................../.......-.................-....../.........|........
..................../........................./..\...................\.................-/......./.............
../...................|...../.-..................-.....|....-.|....................../.../\....-....|..\..|.\.
..................|..................................-....|.........\................................./.......
.........-...........-........\..|-...................--.............-.../......./....................\..-....
-..........-.................\.....|......|.\................|../..........\.........\.|.............-....\...
......./....-....|....-..........|........-...-....-.....-............................................/../....
.......\...........|.......\....\.//\.............\...../|....-...../..|....-................/................
.........\........./............\.-.|......./..........................|....\........-.-.............../..|-.|
.............................\......|....-../.....\.....-..../.........................\......|....../...\/...
.../.\.........../................................./.\.\...............\..............\.....|........-........
..................\......-......|..................\................................/.../.|...................
...\\............................\./................../............................-.......-..|...............
/.............\...-....\...//..-..\....-......-.\............../.....|../.........|..../........\......\......
./..........-.........\..-.................-.|...........\.......-.......|...................|../.............
.....-./.\..../.|.............../...........|..../....\...\/..-.........|....-.........|......................
...../.|.............../.....................\\../...|........\........./|-...........\/./.\\.................
..............\...-..............\.|......./........-...............-.-...|..\......-./..........-.......|../.
.....|...............\....|............../................./....../...-........-.....|........\.........||../|
.../................................../...............-......................................../.......-......
......../.........|..../...............|...../..|................./............|.../.....|....|..\........-...
.../................................//-.......\........./......../....-.....-....-............................
........../....................|................................./.-......|.....\........-..............|..|..
........|...-............|.\.../.......................\...\../...........|../\.\-..../|\..|-...\......\....-.
...-.\..../.....||.....\./.-.....\..............-.......\.../...-....|......\...........-.....-....../........
...|-...|..........\.........../.......................-....../...............\.......\.....|.................
....\..../\\..........-........\............................/...........|.........|......|.|...........|...|..
.............\............................../....|..\.\..../....................\..|...|..-............\....-.
.-/|./...\....-\....-...\...............-.../............-..../.--............................|||.............
....../../\\...|..-.................\.............../.|\/............................../.........\.....|......
..../....................\..................../......\............-//.........................................
.............\..../........../........-..............................|...-/....../..|....|.......-......../...
................-.|..\../...|.\..|..-.....-..../...................\..............\........................./.
........................../......\...............................-..../......................-...........-....
........\.-......................./...............\..............................\...../...................\..
..............................\..|..............|\.-..-....-..|..../.........\.............../.-..............
..........................\\./|.........\|\..............\......./.......-.-...................\.......-......
.............|.........-..\..................|......-..|.-|.................--..||............-.|.............
..............\..\.\.\.........-./....../\../|../.......................\-.....\....|.........................
.............................|.........\.....|..............................|.......././-.../.........-./....|
\.....................\.../..................................-......./........../..\.\.................|......
...............-......................../.....................................................................
..../........./........-.....|................/../....\.........../../.././........./......................-..
.......\................/............................................\........../..\.\......|/|\..............
...........\.............................\\......\\..|..-\................../.-.....................-.........
........|../..\...............|......./.................................|......|./....../......-..............
........./................\.............|...............-.........-.....\.............../.\..........|........
.........................|......./....................-......|........\.........................|/............
.\..-.......................................-....|.................................|\./.\.....................
\../................................-.-.....-..................../....../......../\...|..|......../.......\...
........................../..............\|............./..../.................../...\....\/..................
../-.........................\...\......\......................|.......\..\...\...\.................-..|....\.
....-...................\......-........../......../...............|................................/.........
.................................../......|.......|......................................|..\........-........
......|..|....-..................\./.............../.|...............|.|/.......\.\...........................
...............|...........|.....\................................................|................\.....|....
......../...|......../.................../../...........|...|............./.............\..|.../........-.....
.....................-............\...|..........|...-..........|..-..../...-...../......|....................
...\.......\.....-..................................|/.....\......|.....................|.......|......./.-...
.....................|........./...............|.-...........\........|......|...-/............../.-..........
......./....../.......-....-..............\../\.......\................................................|......
................../.......\\.......................|...\........|...\........-....\..-..........\...../..-....
...............................................-.........................\................\............../..\.
....|......../.........\.........-../....-....................\..................|............................
................./.-../\..........-.....|.........\.........\..../.............................|........--/...
................|./...............|.......\....-\........-.....................-.....|..................../-..
...........\........................|../...-./......\...............\........-./......|.................|..\..
.......|-....../...........|..........|............/.............../.|....../...................\.............
...../...../..........|.......................|....................|.........\|............................\..
........-........\......./....\.............//................................./......./...................|..
..-......../...................-...../.........-...................|..........................\....../.-......
./............................\...............................|............|...../.|................|.........
......\................|.............................-.........\.................................../-........\
./-/..........|.................................../........\....\.....\.....................\.\.........|.....
.-............../../........./.........-......\.....................\..\..\..\/......-./.../....|.............
.....|..................-...\||.......\./../........................-.........................-..........\....
...-................/.|........-....................................|..\....-...\......-..|............/......
..........\...............|.|...-.............-.././...................../.../................................
.......\./............./........../..\............\............-\......|......|....|.........../|.............
............\....|...........|...............-........\..|\..-.....-...|....................\..../.......-....
........\.....\...................|......./......-........./....\-...................|................\....-..
../......................../................-...|..........\........../...................................|.\.
.....................-..../......../........./........./.........\.......|/-...........|.........\...../...../
......//..................\.|....|..|..\...\-........./...........\............/..................|...-.....\.
.....-..-....../..................\....\........................|......................../....|........\..|.\.
.........-............\..............\..\.\../............................\..-...-................./-.........
....|./..........\..-.................\..\...../.\...................-................/............|...../....
...\.................../.....-...../.-.././....-/......|..................|................/.............-....
.....\.||.................\................\..|.....|.............\.\-.............-................./........
.......\..........\....................|................/..............|.../..................\...-.-.||......
.....-./..\.\.........................................|......./.............../....|..|.......-........\...\..
.....|............./.....-...................|.\..../-............\.........................-................\
........\/............./......\......|-...|................../.....|-......................./..............\-.
..............-..../.....-..........||.-.....-.../................././.../............\/................./../.
-.....................................|.........-.....|...................|..................../.../..........
.......................-..|................/...........\...........................|.--.....\..........|/..-..
...............\..................../..../.|..........................|.....................|..\...\....--....
....../.......-...............................|....../.........\.-........../.....................\.--...-....
.-......\............/...-........|.....\........../|........................|..........\...|....../-.........
/............................../.....................................\........../|........-...............\..-
.........\........\.|.|\..\.....-..............-.........-...........|........|...|...........-.............||
.-\................\.......|...................................../..................-.-.....|...\..\.|........
\............-/../.......|............./......\\.\./.|......-/.\.\.............\........./|\.....-............"""



from enum import Enum

class Direction(Enum):
    STOP = 4
    LEFT = 3
    RIGHT = 2
    UP = 1
    DOWN = 0

def try_move_left(lines,row_idx,col_idx):
    if col_idx>0:
        return row_idx,col_idx-1,Direction.LEFT
    else:
        return row_idx,col_idx,Direction.STOP
def try_move_right(lines,row_idx,col_idx):
    if col_idx+1<len(lines[row_idx]):
        return row_idx,col_idx+1,Direction.RIGHT
    else:
        return row_idx,col_idx,Direction.STOP
def try_move_up(lines,row_idx,col_idx):
    if row_idx>0:
        return row_idx-1,col_idx,Direction.UP
    else:
        return row_idx,col_idx,Direction.STOP
def try_move_down(lines,row_idx,col_idx):
    if row_idx+1<len(lines):
        return row_idx+1,col_idx,Direction.DOWN
    else:
        return row_idx,col_idx,Direction.STOP

def debug_print(lines,visited):
    for row_idx in range(0,len(lines)):
        rowchars=[]
        for col_idx in range (0, len(lines[0])):
            if (row_idx,col_idx) in visited:
                vchar = '#'
            else:
                vchar = ' '
            print(f"{lines[row_idx][col_idx]}{vchar}", end=" ")
        print("") # newline
    print("") # newline

def follow_light(lines,row_idx,col_idx,current_direction,visited):
    while current_direction != Direction.STOP:
        char = lines[row_idx][col_idx]
        #debug_print(lines,visited)
        # have we been here before, in this direction?
        if (row_idx,col_idx) in visited:
            if current_direction in visited[(row_idx,col_idx)]:
                return # we did a loop
        else:
            visited[(row_idx,col_idx)]=[]
        visited[(row_idx,col_idx)].append(current_direction)

        # which way next?
        if char == '.':
            if current_direction == Direction.LEFT:
                row_idx,col_idx,current_direction = try_move_left(lines,row_idx,col_idx)
            elif current_direction == Direction.RIGHT:
                row_idx,col_idx,current_direction = try_move_right(lines,row_idx,col_idx)
            elif current_direction == Direction.UP:
                row_idx,col_idx,current_direction = try_move_up(lines,row_idx,col_idx)
            elif current_direction == Direction.DOWN:
                row_idx,col_idx,current_direction = try_move_down(lines,row_idx,col_idx)
        elif char == '/':
            if current_direction == Direction.LEFT:
                row_idx,col_idx,current_direction = try_move_down(lines,row_idx,col_idx)
            elif current_direction == Direction.RIGHT:
                row_idx,col_idx,current_direction = try_move_up(lines,row_idx,col_idx)
            elif current_direction == Direction.UP:
                row_idx,col_idx,current_direction = try_move_right(lines,row_idx,col_idx)
            elif current_direction == Direction.DOWN:
                row_idx,col_idx,current_direction = try_move_left(lines,row_idx,col_idx)
        elif char == '\\':
            if current_direction == Direction.LEFT:
                row_idx,col_idx,current_direction = try_move_up(lines,row_idx,col_idx)
            elif current_direction == Direction.RIGHT:
                row_idx,col_idx,current_direction = try_move_down(lines,row_idx,col_idx)
            elif current_direction == Direction.UP:
                row_idx,col_idx,current_direction = try_move_left(lines,row_idx,col_idx)
            elif current_direction == Direction.DOWN:
                row_idx,col_idx,current_direction = try_move_right(lines,row_idx,col_idx)
        elif char == '-':
            if current_direction == Direction.LEFT:
                row_idx,col_idx,current_direction = try_move_left(lines,row_idx,col_idx)
            elif current_direction == Direction.RIGHT:
                row_idx,col_idx,current_direction = try_move_right(lines,row_idx,col_idx)
            elif current_direction == Direction.UP or current_direction == Direction.DOWN:
                # split into two beams
                new_ri,new_ci,direction=try_move_left(lines,row_idx,col_idx)
                if direction!=Direction.STOP:
                    follow_light(lines,new_ri,new_ci,direction,visited)
                new_ri,new_ci,direction=try_move_right(lines,row_idx,col_idx)
                if direction!=Direction.STOP:
                    follow_light(lines,new_ri,new_ci,direction,visited)
                return # have split so stop!
        elif char == '|':
            if current_direction == Direction.UP:
                row_idx,col_idx,current_direction = try_move_up(lines,row_idx,col_idx)
            elif current_direction == Direction.DOWN:
                row_idx,col_idx,current_direction = try_move_down(lines,row_idx,col_idx)
            elif current_direction == Direction.LEFT or current_direction == Direction.RIGHT:
                # split into two beams
                new_ri,new_ci,direction=try_move_up(lines,row_idx,col_idx)
                if direction!=Direction.STOP:
                    follow_light(lines,new_ri,new_ci,direction,visited)
                new_ri,new_ci,direction=try_move_down(lines,row_idx,col_idx)
                if direction!=Direction.STOP:
                    follow_light(lines,new_ri,new_ci,direction,visited)
                return # have split so stop!
    

def try_entry(lines,row_idx,col_idx,direction):
    visited = {} # this is map, indexed by location tuple, with an array of directions you have visited this square in
    follow_light(lines,row_idx,col_idx,direction,visited)
    return len(visited)

bestest_illuminated=0
lines = input.split('\n')
width=len(lines[0])
height=len(lines)
for row_idx in range(0,height):
    # enter from the left
    illuminated=try_entry(lines,row_idx,0,Direction.RIGHT)
    bestest_illuminated=max(bestest_illuminated,illuminated)
    # enter from the right
    illuminated=try_entry(lines,row_idx,width-1,Direction.LEFT)
    bestest_illuminated=max(bestest_illuminated,illuminated)
for col_idx in range(0,width):
    # enter from the top
    illuminated=try_entry(lines,0,col_idx,Direction.DOWN)
    bestest_illuminated=max(bestest_illuminated,illuminated)
    # enter from the bottom
    illuminated=try_entry(lines,height-1,col_idx,Direction.UP)
    bestest_illuminated=max(bestest_illuminated,illuminated)

print(bestest_illuminated)